package ui;

import gnu.io.SerialPort;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import java.util.TooManyListenersException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import util.rxtx.RxTxUtilities;
import util.rxtx.SerialDataListener;

/**
 *
 * @author Parham
 */
public class SerialTerminal extends javax.swing.JFrame implements Observer {

    private boolean mComPortsPopulated = false;
    private SerialPort mPort;

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SerialTerminal().setVisible(true);
            }
        });
    }

    /** Creates new form SerialTerminal */
    public SerialTerminal() {
        initComponents();

        SerialTerminalModel model = new SerialTerminalModel();
        model.addObserver(this);
        model.notifyObservers();

        mDataScrollPane.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent ae) {
                mDataTextArea.select(mDataTextArea.getHeight() + 100000, 0);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mComLabel = new javax.swing.JLabel();
        mComComboBox = new javax.swing.JComboBox();
        mOpenButton = new javax.swing.JButton();
        mDataScrollPane = new javax.swing.JScrollPane();
        mDataTextArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        mMenuBar = new javax.swing.JMenuBar();
        mFileMenu = new javax.swing.JMenu();
        mExitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Serial Terminal");

        mComLabel.setText("COM:");

        mOpenButton.setText("Open");
        mOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mOpenButtonActionPerformed(evt);
            }
        });

        mDataTextArea.setColumns(20);
        mDataTextArea.setRows(5);
        mDataScrollPane.setViewportView(mDataTextArea);

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        mFileMenu.setText("File");

        mExitMenuItem.setText("Exit");
        mExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mExitMenuItemActionPerformed(evt);
            }
        });
        mFileMenu.add(mExitMenuItem);

        mMenuBar.add(mFileMenu);

        setJMenuBar(mMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mDataScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mComLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mComComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mOpenButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, mOpenButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mComLabel)
                    .addComponent(mComComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mOpenButton)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mDataScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mOpenButtonActionPerformed
        try {
            mPort = RxTxUtilities.openPortByName(mComComboBox.getSelectedItem().toString(), 9600);
            mPort.notifyOnDataAvailable(true);
            SerialDataListener listener = new SerialDataListener(mPort.getInputStream(),mDataTextArea);
            mPort.addEventListener(listener);
        } catch (TooManyListenersException | IOException ex) {
            Logger.getLogger(SerialTerminal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mOpenButtonActionPerformed

    private void mExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mExitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mExitMenuItemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (mPort != null){
            mPort.close();
            mPort = null;
        }
    }//GEN-LAST:event_jButton1ActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox mComComboBox;
    private javax.swing.JLabel mComLabel;
    private javax.swing.JScrollPane mDataScrollPane;
    private javax.swing.JTextArea mDataTextArea;
    private javax.swing.JMenuItem mExitMenuItem;
    private javax.swing.JMenu mFileMenu;
    private javax.swing.JMenuBar mMenuBar;
    private javax.swing.JButton mOpenButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        SerialTerminalModel model = (SerialTerminalModel)o;
        if (!mComPortsPopulated){
            mComComboBox.setModel(new DefaultComboBoxModel(model.getAvailablePorts().toArray(new String[0])));
            mComPortsPopulated = true;
        }
    }

}
